// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot test level 15 1`] = `
<div
  className="container"
>
  <div
    className="boardcontainer2"
  >
    <div
      className="board13"
    >
      <div
        className="box"
        data-col={0}
        data-row={0}
      >
        <img
          alt="d"
          class="goal"
          id="food"
          src="assets/bone.png"
        />
      </div>
      <div
        className="box"
        data-col={1}
        data-row={0}
      />
      <div
        className="box"
        data-col={2}
        data-row={0}
      />
      <div
        className="box"
        data-col={0}
        data-row={1}
      />
      <div
        className="box"
        data-col={1}
        data-row={1}
      >
        <img
          alt="d"
          class="paw"
          id="paw"
          src="assets/paw.png"
        />
      </div>
      <div
        className="box"
        data-col={2}
        data-row={1}
      />
      <div
        className="box"
        data-col={0}
        data-row={2}
      />
      <div
        className="box"
        data-col={1}
        data-row={2}
      />
      <div
        className="box"
        data-col={2}
        data-row={2}
      >
        <img
          alt="d"
          class="image"
          id="dog"
          src="assets/dog.png"
        />
      </div>
    </div>
  </div>
  <div
    className="bottom-panel"
  >
    <div
      class="border"
    >
      <div
        class="level13Contain"
      >
        <h2>
          Level 15:
        </h2>
        <div
          class="speech13"
        >
          It gets a little tricky here, the dog has hid his bone and you have to help him find it. The problem is that you don't know the row or column the bone is at. There is a predefined Bone class that is made for you and you need to call on two getter methods that are made for you "getRow()" and "getCol()". The variables will be used in the while loop as a condtion to stop looping through the commands. Use the same amount or less amount of commands mentioned in the top right corner. The paw prints are a hint on which direction the bone can be.
          <br />
          <br />
          <p
            class="hints"
          >
            There is a hint button below that can get you started on if you are stuck. Click on the information buttons in the Bone class to learn about what is happening in the class and to learn about the private and public modifiers.
            <br />
             Good luck! 
            <br />
             (To learn more about while, understand the while loop condition and how variables work click the i's below)
          </p>
        </div>
        <div
          class="borderPanel"
        >
          <div
            class="toppart13"
          >
            <div
              class="containing"
            >
              <p
                class="number"
                data-testid="counter"
                id="count"
              >
                0/3
              </p>
            </div>
            <button
              class="seemingly-inner-button-hint"
              disabled={false}
              onClick={[Function]}
            >
              Hint
            </button>
            <p
              class="titles"
            >
              Enter Sequence:
            </p>
            <br />
            <div
              class="buttons-wrapper12"
            >
              <button
                class="seemingly-inner-button12"
                disabled={false}
                onClick={[Function]}
              >
                <i
                  class="fa fa-info"
                />
                   Â Variables
              </button>
              <p
                class="subtitles"
              >
                Variable Declaration
              </p>
            </div>
            <div
              class="buttons-wrapper13"
            >
              <p
                class="bones"
              >
                Bone bone = new Bone()
              </p>
            </div>
            <form
              class="var"
            >
              int row =  
              <input
                class="input"
                id="var1"
                onChange={[Function]}
                size="9"
              />
               ; 
              <br />
              <br />
              int col = 
              <input
                class="input"
                id="var2"
                onChange={[Function]}
                size="9"
              />
                ;
              <br />
              <br />
            </form>
            <p
              class="lists"
              id="action"
            />
          </div>
        </div>
        <div
          class="outside15"
        >
          <button
            class="button"
            disabled={false}
            onClick={[Function]}
            type="submit"
          >
            Left
          </button>
          <button
            class="button"
            disabled={false}
            onClick={[Function]}
            type="submit"
          >
            Up
          </button>
          <button
            class="button"
            disabled={false}
            onClick={[Function]}
            type="submit"
          >
            Down
          </button>
          <button
            class="button"
            disabled={false}
            onClick={[Function]}
            type="submit"
          >
            Right
          </button>
          <div
            class="buttons-wrapper5"
          >
            <button
              class="seemingly-inner-button"
              disabled={false}
              onClick={[Function]}
            >
              <i
                class="fa fa-info"
              />
            </button>
            <button
              class="button"
              disabled={false}
              onClick={[Function]}
              type="submit"
            >
              While
            </button>
          </div>
          <button
            class="buttonClear"
            disabled={false}
            onClick={[Function]}
            type="submit"
          >
            Clear
          </button>
          <button
            class="buttonSub"
            disabled={false}
            onClick={[Function]}
            type="submit"
          >
             Submit
          </button>
        </div>
      </div>
    </div>
  </div>
</div>
`;
